package com.siemens.internship;

import com.siemens.internship.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Your Tasks
 * Identify all concurrency and asynchronous programming issues in the code
 * Fix the implementation to ensure:
 * All items are properly processed before the CompletableFuture completes
 * Thread safety for all shared state
 * Proper error handling and propagation
 * Efficient use of system resources
 * Correct use of Spring's @Async annotation
 * Add appropriate comments explaining your changes and why they fix the issues
 * Write a brief explanation of what was wrong with the original implementation
 *
 * Hints
 * Consider how CompletableFuture composition can help coordinate multiple async operations
 * Think about appropriate thread-safe collections
 * Examine how errors are handled and propagated
 * Consider the interaction between Spring's @Async and CompletableFuture
 */

@Service
public class ItemService {
    @Autowired
    private ItemRepository itemRepository;

    // Executorul utilizat la utilizarea thread-urilor
    private static ExecutorService executor = Executors.newFixedThreadPool(10);

    // Listă pentru a stoca elementele procesate, într-un mod thread-safe.
    private List<Item> processedItems = new CopyOnWriteArrayList<>();

    // Contror thread-safe pentru stocarea numărului de elemente procesate.
    private AtomicInteger processedCount = new AtomicInteger(0);


    // Metoda pentru obținerea tuturor elementelor.
    public List<Item> findAll() {
        return itemRepository.findAll();
    }


    // Metoda pentru găsirea unui element prin Id-ul precizat.
    public Optional<Item> findById(Long id) {
        return itemRepository.findById(id);
    }


    // Metoda pentru salvarea unui element.
    public Item save(Item item) {
        return itemRepository.save(item);
    }


    // Metoda pentru ștergerea unui element.
    public void deleteById(Long id) {
        itemRepository.deleteById(id);
    }

    @Async
    public CompletableFuture<List<Item>> processItemsAsync() {

        // Obținem toate ID-urile elementelor.
        List<Long> itemIds = itemRepository.findAllIds();


        // Listă pentru a păstra toate viitoarele operații asincrone.
        List<CompletableFuture<Void>> futures = new ArrayList<>();

        // Parcurge fiecare ID și procesează elementul în mod asincron.
        for (Long id : itemIds) {
            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                try {
                    // Simularea unei întărzieri de procesare.
                    Thread.sleep(100);

                    // Găsirea elementelui după ID.
                    Item item = itemRepository.findById(id).orElse(null);
                    if (item == null) {
                        return;
                    }

                    // Creșterea contorului și actualizarea status-ului elementului cutare.
                    processedCount.incrementAndGet();
                    item.setStatus("PROCESSED");

                    // Salvare elementelui cu valorile sale modificate.
                    itemRepository.save(item);

                    // Elementul este adăugat în lista elementelor procesate.
                    processedItems.add(item);

                } catch (InterruptedException e) {
                    // Dacă există o întrerupere din cauza firelor concurente, va fi capturată de către acest
                    // bloc try-catch.
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Intreruperea la procesarea elementului " + id, e);

                } catch (Exception e){
                    // Dacă există o întrerupere din cauza a orice altă problema, va fi capturată de către acest
                    // bloc try-catch.
                    throw new RuntimeException("Eroare la proecsarea elementului " + id, e);
                }
            }, executor);
            // Adaugă viitorul în listă pentru a urmării toate sarcinile asincrone.
            futures.add(future);
        }
        // Așteaptă finalizarea tuturor operațiilor asincrone și returnează elementele procesate.
        return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenApply(v -> new ArrayList<>(processedItems));
    }

}